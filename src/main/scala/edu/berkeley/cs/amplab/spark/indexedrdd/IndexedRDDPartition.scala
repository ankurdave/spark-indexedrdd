/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.berkeley.cs.amplab.spark.indexedrdd

import scala.reflect.ClassTag

/**
 * A map of key-value `(K, V)` pairs that enforces key uniqueness and pre-indexes the entries for
 * fast lookups, joins, and optionally updates. To construct an `IndexedRDDPartition`, use one of
 * the constructors in the [[edu.berkeley.cs.amplab.spark.indexedrdd.IndexedRDDPartition$
 * IndexedRDDPartition object]].
 *
 * @tparam K the key associated with each entry in the set.
 * @tparam V the value associated with each entry in the set.
 */
private[indexedrdd] abstract class IndexedRDDPartition[K, V] extends Serializable {

  protected implicit def kTag: ClassTag[K]
  protected implicit def vTag: ClassTag[V]

  def size: Int

  /** Return the value for the given key. */
  def apply(k: K): V

  def isDefined(k: K): Boolean

  def iterator: Iterator[(K, V)]

  /**
   * Gets the values corresponding to the specified keys, if any.
   */
  def multiget(ks: Iterator[K]): Iterator[Option[(K, V)]]

  /**
   * Updates the keys in `kvs` to their corresponding values generated by running `f` on old and new
   * values, if an old value exists, or `z` otherwise. Returns a new IndexedRDDPartition that
   * reflects the modification.
   */
  def multiput[U](kvs: Iterator[(K, U)], z: U => V, f: (K, U, V) => V): IndexedRDDPartition[K, V] =
    throw new UnsupportedOperationException("modifications not supported")

  /** Deletes the specified keys. Returns a new IndexedRDDPartition that reflects the deletions. */
  def delete(ks: Iterator[K]): IndexedRDDPartition[K, V] =
    throw new UnsupportedOperationException("modifications not supported")

  /** Maps each value, supplying the corresponding key and preserving the index. */
  def mapValues[V2: ClassTag](f: (K, V) => V2): IndexedRDDPartition[K, V2]

  /**
   * Restricts the entries to those satisfying the given predicate.
   */
  def filter(pred: (K, V) => Boolean): IndexedRDDPartition[K, V]

  /** Joins `this` with `other`, running `f` on the values of all keys in both sets. */
  def fullOuterJoin[V2: ClassTag, W: ClassTag]
      (other: IndexedRDDPartition[K, V2])
      (f: (K, Option[V], Option[V2]) => W): IndexedRDDPartition[K, W]

  /** Joins `this` with `other`, running `f` on the values of all keys in both sets. */
  def fullOuterJoin[V2: ClassTag, W: ClassTag]
      (other: Iterator[(K, V2)])
      (f: (K, Option[V], Option[V2]) => W): IndexedRDDPartition[K, W]

  /**
   * Left-biased union of `this` with `other`. Runs `f` on the values of corresponding keys,
   * preserving values in `this` with no corresponding entries in `other`.
   */
  def union[U: ClassTag]
      (other: IndexedRDDPartition[K, U])
      (f: (K, V, U) => V): IndexedRDDPartition[K, V]

  /**
   * Left-biased union of `this` with `other`. Runs `f` on the values of corresponding keys,
   * preserving values in `this` with no corresponding entries in `other`.
   */
  def union[U: ClassTag]
      (other: Iterator[(K, U)])
      (f: (K, V, U) => V): IndexedRDDPartition[K, V]

  /** Left outer joins `this` with `other`, running `f` on all values of `this`. */
  def leftOuterJoin[V2: ClassTag, V3: ClassTag]
      (other: IndexedRDDPartition[K, V2])
      (f: (K, V, Option[V2]) => V3): IndexedRDDPartition[K, V3]

  /** Left outer joins `this` with `other`, running `f` on all values of `this`. */
  def leftOuterJoin[V2: ClassTag, V3: ClassTag]
      (other: Iterator[(K, V2)])
      (f: (K, V, Option[V2]) => V3): IndexedRDDPartition[K, V3]

  /** Inner joins `this` with `other`, running `f` on the values of corresponding keys. */
  def innerJoin[U: ClassTag, V2: ClassTag]
      (other: IndexedRDDPartition[K, U])
      (f: (K, V, U) => V2): IndexedRDDPartition[K, V2]

  /** Inner joins `this` with `other`, running `f` on the values of corresponding keys. */
  def innerJoin[U: ClassTag, V2: ClassTag]
      (other: Iterator[(K, U)])
      (f: (K, V, U) => V2): IndexedRDDPartition[K, V2]

}

private[indexedrdd] object IndexedRDDPartition {

  def updatableHash[K: ClassTag, U: ClassTag, V: ClassTag](
      iter: Iterator[(K, U)], z: U => V, f: (U, V) => V): IndexedRDDPartition[K, V] = {
    new UpdatableHashIndexedRDDPartition(iter, z, f)
  }
  /**
   * Constructs an IndexedRDDPartition from an iterator of pairs, merging duplicate keys
   * arbitrarily.
   */
  def apply[V: ClassTag](iter: Iterator[(Id, V)]): IndexedRDDPartition[V] = {
    val map = new PrimitiveKeyOpenHashMap[Id, V]
    iter.foreach { pair =>
      map(pair._1) = pair._2
    }
    new IndexedRDDPartition(
      ImmutableLongOpenHashSet.fromLongOpenHashSet(map.keySet),
      ImmutableVector.fromArray(map.values),
      map.keySet.getBitSet.toImmutableBitSet)
  }

  /** Constructs an IndexedRDDPartition from an iterator of pairs. */
  def apply[V: ClassTag](iter: Iterator[(Id, V)], mergeFunc: (V, V) => V)
    : IndexedRDDPartition[V] = {
    val map = new PrimitiveKeyOpenHashMap[Id, V]
    iter.foreach { pair =>
      map.setMerge(pair._1, pair._2, mergeFunc)
    }
    new IndexedRDDPartition(
      ImmutableLongOpenHashSet.fromLongOpenHashSet(map.keySet),
      ImmutableVector.fromArray(map.values),
      map.keySet.getBitSet.toImmutableBitSet)
  }
}
